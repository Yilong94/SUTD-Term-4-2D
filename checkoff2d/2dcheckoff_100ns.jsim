.checkoff "10.1.3.26/checkoff/50002project2d.doit" "2d" 979063745

.verify xs[31:0] periodic(29.9E-8,1.0000000000000001E-7)
+ 0x00000000 //299 ns
+ 0x00000001 //399 ns
+ 0x80000000 //499 ns
+ 0x55555555 //599 ns
+ 0x55555555 //699 ns
+ 0xAAAAAAAA //799 ns
+ 0xAAAAAAAA //899 ns
+ 0xAAAAAAAA //999 ns
+ 0x55555554 //1099 ns
+ 0xFFFFFFFE //1199 ns
+ 0x00000000 //1299 ns
+ 0xFFFFFFFF //1399 ns
+ 0x00000001 //1499 ns
+ 0xFFFFFFE2 //1599 ns
+ 0x00000004 //1699 ns
+ 0x00000008 //1799 ns
+ 0xFFFFFFEE //1899 ns
+ 0x00000020 //1999 ns
+ 0xFFFFFFC0 //2099 ns
+ 0x0000007E //2199 ns
+ 0x00000100 //2299 ns
+ 0x00000200 //2399 ns
+ 0x00000400 //2499 ns
+ 0x00000800 //2599 ns
+ 0x00001000 //2699 ns
+ 0x00002000 //2799 ns
+ 0x00004000 //2899 ns
+ 0x00008000 //2999 ns
+ 0x00010000 //3099 ns
+ 0xFFFE2000 //3199 ns
+ 0xFFFC2000 //3299 ns
+ 0x00080000 //3399 ns
+ 0x00100000 //3499 ns
+ 0x00200000 //3599 ns
+ 0x00400000 //3699 ns
+ 0xFF800100 //3799 ns
+ 0x01000000 //3899 ns
+ 0x02000000 //3999 ns
+ 0x04000000 //4099 ns
+ 0x08000000 //4199 ns
+ 0x10000000 //4299 ns
+ 0x20000000 //4399 ns
+ 0x40000000 //4499 ns
+ 0x80000002 //4599 ns
+ 0x00000000 //4699 ns
+ 0x00000001 //4799 ns
+ 0x80000000 //4899 ns
+ 0x55555555 //4999 ns
+ 0xAAAAAAAB //5099 ns
+ 0x00000000 //5199 ns
+ 0xAAAAAAAA //5299 ns
+ 0x55555556 //5399 ns
+ 0x00000000 //5499 ns
+ 0x00000000 //5599 ns
+ 0x00000002 //5699 ns
+ 0xFFFFFFFF //5799 ns

.verify xz periodic(29.9E-8,1.0000000000000001E-7)
+ 0x1  // 299ns
+ 0x0  // 399ns
+ 0x0  // 499ns
+ 0x0  // 599ns
+ 0x0  // 699ns
+ 0x0  // 799ns
+ 0x0  // 899ns
+ 0x0  // 999ns
+ 0x0  // 1099ns
+ 0x0  // 1199ns
+ 0x1  // 1299ns
+ 0x0  // 1399ns
+ 0x0  // 1499ns
+ 0x0  // 1599ns
+ 0x0  // 1699ns
+ 0x0  // 1799ns
+ 0x0  // 1899ns
+ 0x0  // 1999ns
+ 0x0  // 2099ns
+ 0x0  // 2199ns
+ 0x0  // 2299ns
+ 0x0  // 2399ns
+ 0x0  // 2499ns
+ 0x0  // 2599ns
+ 0x0  // 2699ns
+ 0x0  // 2799ns
+ 0x0  // 2899ns
+ 0x0  // 2999ns
+ 0x0  // 3099ns
+ 0x0  // 3199ns
+ 0x0  // 3299ns
+ 0x0  // 3399ns
+ 0x0  // 3499ns
+ 0x0  // 3599ns
+ 0x0  // 3699ns
+ 0x0  // 3799ns
+ 0x0  // 3899ns
+ 0x0  // 3999ns
+ 0x0  // 4099ns
+ 0x0  // 4199ns
+ 0x0  // 4299ns
+ 0x0  // 4399ns
+ 0x0  // 4499ns
+ 0x0  // 4599ns
+ 0x1  // 4699ns
+ 0x0  // 4799ns
+ 0x0  // 4899ns
+ 0x0  // 4999ns
+ 0x0  // 5099ns
+ 0x1  // 5199ns
+ 0x0  // 5299ns
+ 0x0  // 5399ns
+ 0x1  // 5499ns
+ 0x1  // 5599ns
+ 0x0  // 5699ns
+ 0x0  // 5799ns

.verify xv periodic(29.9E-8,1.0000000000000001E-7)
+ 0x0  // 299ns
+ 0x0  // 399ns
+ 0x1  // 499ns
+ 0x0  // 599ns
+ 0x0  // 699ns
+ 0x1  // 799ns
+ 0x0  // 899ns
+ 0x0  // 999ns
+ 0x1  // 1099ns
+ 0x0  // 1199ns
+ 0x0  // 1299ns
+ 0x0  // 1399ns
+ 0x0  // 1499ns
+ 0x0  // 1599ns
+ 0x0  // 1699ns
+ 0x0  // 1799ns
+ 0x0  // 1899ns
+ 0x0  // 1999ns
+ 0x0  // 2099ns
+ 0x0  // 2199ns
+ 0x0  // 2299ns
+ 0x0  // 2399ns
+ 0x0  // 2499ns
+ 0x0  // 2599ns
+ 0x0  // 2699ns
+ 0x0  // 2799ns
+ 0x0  // 2899ns
+ 0x0  // 2999ns
+ 0x0  // 3099ns
+ 0x0  // 3199ns
+ 0x0  // 3299ns
+ 0x0  // 3399ns
+ 0x0  // 3499ns
+ 0x0  // 3599ns
+ 0x0  // 3699ns
+ 0x0  // 3799ns
+ 0x0  // 3899ns
+ 0x0  // 3999ns
+ 0x0  // 4099ns
+ 0x0  // 4199ns
+ 0x0  // 4299ns
+ 0x0  // 4399ns
+ 0x0  // 4499ns
+ 0x0  // 4599ns
+ 0x0  // 4699ns
+ 0x0  // 4799ns
+ 0x1  // 4899ns
+ 0x0  // 4999ns
+ 0x0  // 5099ns
+ 0x0  // 5199ns
+ 0x0  // 5299ns
+ 0x0  // 5399ns
+ 0x0  // 5499ns
+ 0x0  // 5599ns
+ 0x0  // 5699ns
+ 0x0  // 5799ns

.verify xn periodic(29.9E-8,1.0000000000000001E-7)
+ 0x0  // 299ns
+ 0x0  // 399ns
+ 0x1  // 499ns
+ 0x0  // 599ns
+ 0x0  // 699ns
+ 0x1  // 799ns
+ 0x1  // 899ns
+ 0x1  // 999ns
+ 0x0  // 1099ns
+ 0x1  // 1199ns
+ 0x0  // 1299ns
+ 0x1  // 1399ns
+ 0x0  // 1499ns
+ 0x1  // 1599ns
+ 0x0  // 1699ns
+ 0x0  // 1799ns
+ 0x1  // 1899ns
+ 0x0  // 1999ns
+ 0x1  // 2099ns
+ 0x0  // 2199ns
+ 0x0  // 2299ns
+ 0x0  // 2399ns
+ 0x0  // 2499ns
+ 0x0  // 2599ns
+ 0x0  // 2699ns
+ 0x0  // 2799ns
+ 0x0  // 2899ns
+ 0x0  // 2999ns
+ 0x0  // 3099ns
+ 0x1  // 3199ns
+ 0x1  // 3299ns
+ 0x0  // 3399ns
+ 0x0  // 3499ns
+ 0x0  // 3599ns
+ 0x0  // 3699ns
+ 0x1  // 3799ns
+ 0x0  // 3899ns
+ 0x0  // 3999ns
+ 0x0  // 4099ns
+ 0x0  // 4199ns
+ 0x0  // 4299ns
+ 0x0  // 4399ns
+ 0x0  // 4499ns
+ 0x1  // 4599ns
+ 0x0  // 4699ns
+ 0x0  // 4799ns
+ 0x1  // 4899ns
+ 0x0  // 4999ns
+ 0x1  // 5099ns
+ 0x0  // 5199ns
+ 0x1  // 5299ns
+ 0x0  // 5399ns
+ 0x0  // 5499ns
+ 0x0  // 5599ns
+ 0x0  // 5699ns
+ 0x1  // 5799ns


.subckt TestAdder32 xa[31:0] xb[31:0] xop0 clk xs[31:0] xz xv xn
Xreginxa xa[31:0] clk#32 xaq[31:0] dreg
Xreginxb xb[31:0] clk#32 xbq[31:0] dreg
Xreginxop xop0 clk op0 dreg
Xadder op0 xaq[31:0] xbq[31:0] s[31:0] z v n adder32
Xregoutxs s[31:0] clk#32 xs[31:0] dreg
Xregoutxz z clk xz dreg
Xregoutxv v clk xv dreg
Xregoutxn n clk xn dreg
.ends

Xtestadder xa[31:0] xb[31:0] xop0 clk xs[31:0] xz xv xn TestAdder32

Wa xa[31:0] nrz(0,3.3,100n,0n,.1n,.1n)
// test all combinations of 3 inputs to each bit of the adder.  Also tests
// N and both ways of producing V
+ 0x00000000 0x00000001 0x7FFFFFFF 0x55555555 
+ 0x00000000 0x55555555 0xAAAAAAAA 0x00000000 
+ 0xAAAAAAAA 0xFFFFFFFF 0x00000001 0xFFFFFFFF
// test each input to Z logic
+ 0x00000001 0xFFFFFFF2 0x00000001 0xAAAAAAAC 
+ 0xFFFFFFFF 0x00000002 0x00000000 0x0000007F
+ 0x00000080 0x00000180 0x00000380 0x00000780 
+ 0x00001000 0x00001000 0x00003000 0x00007000
+ 0x0000F000 0x00001000 0x00001000 0x0007F800 
+ 0x000FFC00 0x001FFE00 0x003FFF00 0x00000080
+ 0xFF000000 0x04000000 0x03000FFF 0x070007FF 
+ 0x0F0003FF 0x1F0001FF 0x3F0000FF 0x80000001
// check subtract
+ 0x00000000 0x00000001 0x7FFFFFFF 0x55555555 
+ 0x00000000 0x55555555 0xAAAAAAAA 0x00000000 
+ 0xAAAAAAAA 0xFFFFFFFF 0x00000001 0xFFFFFFFF


Wb xb[31:0] nrz(0,3.3,100n,0n,.1n,.1n)
// test all combinations of 3 inputs to each bit of the adder.  Also tests
// N and both ways of producing V
+ 0x00000000 0x00000000 0x00000001 0x00000000 
+ 0x55555555 0x55555555 0x00000000 0xAAAAAAAA 
+ 0xAAAAAAAA 0xFFFFFFFF 0xFFFFFFFF 0x00000000
// test each input to Z logic
+ 0x00000000 0xFFFFFFF0 0x00000003 0x5555555C
+ 0xFFFFFFEF 0x0000001E 0xFFFFFFC0 0xFFFFFFFF
+ 0x00000080 0x00000080 0x00000080 0x00000080
+ 0x00000000 0x00001000 0x00001000 0x00001000
+ 0x00001000 0xFFFE1000 0xFFFC1000 0x00000800
+ 0x00000400 0x00000200 0x00000100 0xFF800080
+ 0x02000000 0xFE000000 0x00FFF001 0x00FFF801
+ 0x00FFFC01 0x00FFFE01 0x00FFFF01 0x00000001
// check subtract
+ 0x00000000 0x00000000 0xFFFFFFFF 0x00000000 
+ 0x55555555 0x55555555 0x00000000 0xAAAAAAAA 
+ 0xAAAAAAAA 0xFFFFFFFF 0xFFFFFFFF 0x00000000

Wo xop0 nrz(0,3.3,100n,0n,.1n,.1n)
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 1 1 1 1 
+ 1 1 1 1
+ 1 1 1 1


Vclk clk 0 pulse(3.3,0,49.9ns,.1ns,.1ns,49.9ns)

.tran 5800n

.plot L(xa[31:0])
.plot L(xb[31:0])
.plot L(xs[31:0])
.plot L(xz)
.plot L(xv)
.plot L(xn)
.plot clk
