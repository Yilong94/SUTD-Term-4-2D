//.checkoff "192.168.2.136:8000/checkoff/50002project2d.doit" "2d" 2087318841

.verify xs[31:0] periodic(8.3E-9,2.8000000000000001E-9)
+ 0x00000000 // 8.3 ns 
+ 0x00000001 // 
+ 0x80000000 // 
+ 0x55555555 // 
+ 0x55555555 // 
+ 0xAAAAAAAA // 
+ 0xAAAAAAAA // 
+ 0xAAAAAAAA // 
+ 0x55555554 // 
+ 0xFFFFFFFE // 
+ 0x00000000 // 
+ 0xFFFFFFFF // 
+ 0x00000001 // 
+ 0xFFFFFFE2 // 
+ 0x00000004 // 
+ 0x00000008 // 
+ 0xFFFFFFEE // 
+ 0x00000020 // 
+ 0xFFFFFFC0 // 
+ 0x0000007E // 
+ 0x00000100 // 
+ 0x00000200 // 
+ 0x00000400 // 
+ 0x00000800 // 
+ 0x00001000 // 
+ 0x00002000 // 
+ 0x00004000 // 
+ 0x00008000 // 
+ 0x00010000 // 
+ 0xFFFE2000 // 
+ 0xFFFC2000 // 
+ 0x00080000 // 
+ 0x00100000 // 
+ 0x00200000 // 
+ 0x00400000 // 
+ 0xFF800100 // 
+ 0x01000000 // 
+ 0x02000000 // 
+ 0x04000000 // 
+ 0x08000000 // 
+ 0x10000000 // 
+ 0x20000000 // 
+ 0x40000000 // 
+ 0x80000002 // 
+ 0x00000000 // 
+ 0x00000001 // 
+ 0x80000000 // 
+ 0x55555555 // 
+ 0xAAAAAAAB // 
+ 0x00000000 // 
+ 0xAAAAAAAA // 
+ 0x55555556 // 
+ 0x00000000 // 
+ 0x00000000 // 
+ 0x00000002 // 
+ 0xFFFFFFFF // 


.verify xz periodic(8.3E-9,2.8000000000000001E-9)
+ 0x1  // 8.3 ns
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 


.verify xv periodic(8.3E-9,2.8000000000000001E-9)
+ 0x0  // 8.3 ns
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 


.verify xn periodic(8.3E-9,2.8000000000000001E-9)
+ 0x0  // 8.3 ns
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x1  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x1  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x0  // 
+ 0x1  // 




.subckt TestAdder32 xa[31:0] xb[31:0] xop0 clk xs[31:0] xz xv xn
Xreginxa xa[31:0] clk#32 xaq[31:0] dreg
Xreginxb xb[31:0] clk#32 xbq[31:0] dreg
Xreginxop xop0 clk op0 dreg
Xadder op0 xaq[31:0] xbq[31:0] s[31:0] z v n adder32
Xregoutxs s[31:0] clk#32 xs[31:0] dreg
Xregoutxz z clk xz dreg
Xregoutxv v clk xv dreg
Xregoutxn n clk xn dreg
.ends

Xtestadder xa[31:0] xb[31:0] xop0 clk xs[31:0] xz xv xn TestAdder32

Wa xa[31:0] nrz(0,3.3,2.8n,0n,.1n,.1n)
// test all combinations of 3 inputs to each bit of the adder.  Also tests
// N and both ways of producing V
+ 0x00000000 0x00000001 0x7FFFFFFF 0x55555555 
+ 0x00000000 0x55555555 0xAAAAAAAA 0x00000000 
+ 0xAAAAAAAA 0xFFFFFFFF 0x00000001 0xFFFFFFFF
// test each input to Z logic
+ 0x00000001 0xFFFFFFF2 0x00000001 0xAAAAAAAC 
+ 0xFFFFFFFF 0x00000002 0x00000000 0x0000007F
+ 0x00000080 0x00000180 0x00000380 0x00000780 
+ 0x00001000 0x00001000 0x00003000 0x00007000
+ 0x0000F000 0x00001000 0x00001000 0x0007F800 
+ 0x000FFC00 0x001FFE00 0x003FFF00 0x00000080
+ 0xFF000000 0x04000000 0x03000FFF 0x070007FF 
+ 0x0F0003FF 0x1F0001FF 0x3F0000FF 0x80000001
// check subtract
+ 0x00000000 0x00000001 0x7FFFFFFF 0x55555555 
+ 0x00000000 0x55555555 0xAAAAAAAA 0x00000000 
+ 0xAAAAAAAA 0xFFFFFFFF 0x00000001 0xFFFFFFFF


Wb xb[31:0] nrz(0,3.3,2.8n,0n,.1n,.1n)
// test all combinations of 3 inputs to each bit of the adder.  Also tests
// N and both ways of producing V
+ 0x00000000 0x00000000 0x00000001 0x00000000 
+ 0x55555555 0x55555555 0x00000000 0xAAAAAAAA 
+ 0xAAAAAAAA 0xFFFFFFFF 0xFFFFFFFF 0x00000000
// test each input to Z logic
+ 0x00000000 0xFFFFFFF0 0x00000003 0x5555555C
+ 0xFFFFFFEF 0x0000001E 0xFFFFFFC0 0xFFFFFFFF
+ 0x00000080 0x00000080 0x00000080 0x00000080
+ 0x00000000 0x00001000 0x00001000 0x00001000
+ 0x00001000 0xFFFE1000 0xFFFC1000 0x00000800
+ 0x00000400 0x00000200 0x00000100 0xFF800080
+ 0x02000000 0xFE000000 0x00FFF001 0x00FFF801
+ 0x00FFFC01 0x00FFFE01 0x00FFFF01 0x00000001
// check subtract
+ 0x00000000 0x00000000 0xFFFFFFFF 0x00000000 
+ 0x55555555 0x55555555 0x00000000 0xAAAAAAAA 
+ 0xAAAAAAAA 0xFFFFFFFF 0xFFFFFFFF 0x00000000


Wo xop0 nrz(0,3.3,2.8n,0n,.1n,.1n)
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 0 0 0 0
+ 0 0 0 0 
+ 0 0 0 0
+ 1 1 1 1 
+ 1 1 1 1
+ 1 1 1 1


Vclk clk 0 pulse(3.3,0,1.3ns,.1ns,.1ns,1.3ns)

.tran 163n

.plot L(xa[31:0])
.plot L(xb[31:0])
.plot L(xs[31:0])
.plot L(xz)
.plot L(xv)
.plot L(xn)
.plot clk



